---
import { PAGESIZE } from '../../../consts.ts'
import { getCollection, type CollectionEntry } from 'astro:content'
import { type Page, type GetStaticPaths } from 'astro'
import Content from '../../../components/PaginateContent.astro'

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const stickPost: CollectionEntry<'blog'>[] = []
  const otherPost: CollectionEntry<'blog'>[] = []
  const tags: { [key: string]: number } = {}
  ;(await getCollection('blog')).forEach(item => {
    item.data.tags?.forEach(val => {
      tags[val] ? tags[val]++ : (tags[val] = 1)
    })
    if (typeof item.data.sticky === 'number') {
      stickPost.push(item)
    } else {
      otherPost.push(item)
    }
  })
  stickPost.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  otherPost.sort((a, b) => (a.data?.sticky || 0) - (b.data?.sticky || 0))
  const posts = [...stickPost, ...otherPost]
  return Object.keys(tags)?.flatMap(tag => {
    const filteredPosts = posts.filter(post => post.data.tags?.includes(tag))
    return paginate(filteredPosts, {
      params: { tag },
      pageSize: PAGESIZE || 5,
      props: { tags },
    })
  })
}
const { page, tags } = Astro.props as {
  page: Page
  tags: { [key: string]: number }
}
---

<Content page={page} tags={tags} />
